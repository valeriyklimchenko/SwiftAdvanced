/* Залача 1 и 3
 Абстракция
Заболевание наиболее полно и кратко описывается слудующими объектами: летальность заболевания, тип по происхождению источнкика заболевания, количество дней инкубационного периода. Нам не нужно знать подробную статистику по заболеванию по районам, чтобы помочь пациенту
class Desease {
    var isLetal: Bool = true
    var deseaseType: String = type //вирусное, микробное
    var incubationpPeriodDuration: Int = days
}

Дорога наиболее полно и кратко описывается слудующими характеристиками: длина, ширина, количество полос, является ли дорога только для легковых автомобилей. Нам не нужно знать кто ее строил, чтобы проехать по ней
class Road() {
    var lenght: Double = "lenght"
    var widht: Double = "widht"
    var lanesNumber: Int = "lanes Number"
    var forCarOnly: Bool = true     //для легковых только
    var toolRoad: Bool = true   //платная
}

Инкапсуляция
 Насекомое может есть, размножаться, двигаться, иметь или не иметь крылья, также характеризуется количеством ног. В данном примере инкапсуляция и полиморфизм идут рука  об руку, так как протокрол инкапсулирует в себе данные разных типов
protocol Insect {
    func eat() {}
    func reproduction() {}
    func movement() {}
    var isWings: Bool = true
    var footsNumber: Int = "footsNumber"
    }
Чтобы животное могло жить, необходима слаженная работа всех систем организма: выделительная, репродуктивная, пищеварительная, кровеносная и дыхательная. Получается что живой организм объединяет (инкапсулирует) в себе сразу несколько систем (функций в программировании)
class Animal() {
    func digestiveSystem() {}
    func respiratorySystem() {}
    func excretorySystem() {}
    func circulatorySystem() {}
    func nervousSystem() {}
    }

Наследование
 Бабочка наследует все признаки класса Насекомое и имеет свои собственные признаки и свойства
class Butterfly: Insect {
    func eat() {}
    func reproduction() {}
    func movement() {}
    var isWings: Bool = true
    var footsNumber: Int = "footsNumber"
    func fly() {}
    func pollination() {} //опыление
}
 Чтобы описать класс Рептилии из животного мира, можно использовать те признаки и характеристики, которые присуще царству Животные, после чего добавить черты, отличающие рептилий от других
class Reptile: Animal() {
    func digestiveSystem() {}
    func respiratorySystem() {}
    func excretorySystem() {}
    func circulatorySystem() {}
    func nervousSystem() {}
    func crawl() {}
}

Полиморфизм
 Человек сможет прочитать информацию из любого источника (книга, статья, сайт...), если человек сможет реализовать функцию чтение (он умеет читать на языке источника информации)
class Ridding() {
    func ridding() {
    var readObject: String = "readObject"
}

 Голосу человека присущи харакиеристики (громкость, тип голоса...), которые имеют данные разных типов (строка, логическое выражение, число)
class Voice() {
    var volume: Double = "decibels"
    var voiceType: String = "voiseType"
    var isMale: Bool = true
    func voice() {}
}

Ad hoc Полмиморфизм
 Представим себе, что есть сковорода и человек, который умеет готовить. Независимо от того, какие ингридиенты он будет использовать, какое то блюдо будет приготовлено. Однако придется регулировать газ, менять время обжарки или вообще накрыть сковородку крышкой и тушить. На языке кода это означает, что для разных типов объектов функция может видоизмениться, но суть процесса останется прежней - мы готовим еду

 Class Cook() {
    fun time() {}
    fun flameLevel() {}
    fun fry() {}
    fun stew() {}
 }




Задача 2 и 3
Подрядчик прокдадывает трубы ХВС в многоквартирном жилом доме. План прокладки труб в типовой квартире этого дома - это Класс.
 В плане прокладки труб указаны размеры помещений и протяженность трубы на каждом участке квартиры - это свойства класса
 Для квартиры на последнем этаже труба не должна идти через потолок к следующему соседу, так как этаж последний. План с коррективами и дополнениями для такой квартиры - это экземпляр класса (объект).
 Строители Муханбег Мусангумаев глупый и не знает как прокладывать трубы. Ему дали инструкцию о том как штробить стены, теплоизолировать трубы и заделывать штробы, а также инстукцию по ТБ, чтобы он случайно не отпилил себе какую-нибудь часть тела. Строителю дали методы на языке програмирования. Чтобу чтроба получилась нужной глубины, нужно выставить на штроборезе глубину штробдения - это свойство функции

 class Construction() {
    func instruction1() {}
    func instruction2() {}
    func instruction3() {}
    var lenght: Double = "lenght"
 }

class ConstructionTopFloor() {}




Мальчик Петя любит писать стихи. Для него эталоном всегда был роман в стихах Евгений Онегин. (Класс)
 У Пети пока мало опыта, поэтому он почти полностью копирует стилистику написания у великого АСПушкина (стихи Пети - экземпляр класса)
Однако Петя уже умеет создавать рифму сам (метод)
 Свойство класса - это любые характеристики, особенности стров романа в стихах. Например: Онегинская строфа – это строфа из 14 стихов с рифмовкой АвАвССddEffE gg

class EvgeniyOnegin() {
    let strofa: String = "АвАвССddEffE gg"
 }

class PetyasPoems() {
    func iWriteLikePushkin() {}
 }
 */

class Road {
    var lenght = "lenght"
    var widht = "widht"
    var lanesNumber = "lanes Number"
    var forCarOnly: Bool = true     //для легковых только
    var toolRoad: Bool = true   //платная
}
print("df")
